import { HttpService } from '@nestjs/axios';
import { DatabaseService } from 'src/lib/database/database.service';
import { CreateSalesJunction, CreateSalesPartner, CreateSalesPartnerRequest } from '../sales/dto/create-sale.dto';
import { createPaid, MobileNumberAndOtpDtO, MobileNumberDtO, ParamDto, requestDto, User } from './dto/create-admin.dto';
import { ConfirmForgotPasswordDTO, ForgotPasswordDTO, LoginDTO } from './dto/login.dto';
import { TemplateService } from 'src/constants/template.service';
export declare class AdminService {
    private readonly salesJunctionDb;
    private readonly salesDb;
    private readonly salesPartnerRequestDb;
    private readonly templateService;
    private http;
    constructor(salesJunctionDb: DatabaseService<CreateSalesJunction>, salesDb: DatabaseService<CreateSalesPartner>, salesPartnerRequestDb: DatabaseService<CreateSalesPartnerRequest>, templateService: TemplateService, http: HttpService);
    accountSid: any;
    authToken: any;
    serviceSid: any;
    client: any;
    salesPartnerAccountDetails: any[];
    salesPartnerRequestDetails: any;
    salesPartnerDetails: any;
    salesParterEmail: any;
    fetchSalesPartnerAccountDetails(): any;
    fetchUser(createSalesPartner: CreateSalesPartner[]): Promise<any>;
    fetchAccount(userDoc: User[], saleDoc: CreateSalesPartner): Promise<any>;
    sentOtpToPhoneNumber(mobileNumberDtO: MobileNumberDtO): any;
    verifyOtp(mobileNumberAndOtpDtO: MobileNumberAndOtpDtO): any;
    sentFedoAppDownloadLinkToPhoneNumber(mobileNumberDtO: MobileNumberDtO): any;
    sentFedoAppDownloadLinkToWhatsappNumber(mobileNumberDtO: MobileNumberDtO): any;
    sentFedoAppDownloadLinkToMobileAndWhatsappNumber(mobileNumberDtO: MobileNumberDtO): any;
    sendEmailOnIncorrectBankDetails(body: requestDto, param: ParamDto): any;
    private readonly onTwilioErrorResponse;
    login(logindto: LoginDTO): any;
    forgotPassword(forgotPasswordDTO: ForgotPasswordDTO): any;
    confirmForgotPassword(confirmForgotPasswordDTO: ConfirmForgotPasswordDTO): any;
    private readonly onAWSErrorResponse;
    private readonly onHTTPErrorResponse;
    encryptPassword(password: any): any;
    updatingPaidAmount(updateAmountdto: createPaid): Promise<void>;
}
